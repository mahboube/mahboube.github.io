<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://m-movahedi.ir/</link>
    <atom:link href="http://m-movahedi.ir/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 08 Apr 2016 22:06:43 +0430</pubDate>
    <lastBuildDate>Fri, 08 Apr 2016 22:06:43 +0430</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>تنظیم وپیکربندی گیت</title>
        <description>&lt;p&gt;تنظیم و پیکربندی git&lt;/p&gt;

&lt;p&gt;پس از نصب گیت، باید برخی تنظیمات اولیه را تنها برای یک مرتبه انجام داد. تنظیم و پیکربندی گیت با استفاده از دستور config امکان پذیر است. git config به شما اجازه می دهد که تنظیمات اعمال شده را مشاهده کرده و یا آنها را تعریف کنید. تنظیماتی که نحوه عملکرد و نمایش گیت را کنترل می کنند. این تنظیمات می توانند در سه مکان متفاوت ذخیره شوند:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;تنظیمات سیستمی که در “پوشه‌ی محل نصب گیت” در مسیر etc/gitconfig ذخیره می شوند. این تنظیمات برای تمام کاربران آن سیستم و همه‌ی Repository های آنها یکسان می باشد. با استفاده از گزینه‌ی --system بعد از دستور git config می‌توان این تنظیمات را مشاهده نموده و یا تغییر داد.
تنظیمات عمومی کاربری که به یک اکانت کاربر مشخص در سیستم تعلق دارند. این تنظیمات در فایلی به نام .gitconfig ذخیره می شوند؛ این فایل در پوشه‌ی مربوط به هر اکانت کاربری قرار دارد [در سیستم‌های عامل مک و شبه‌یونیکس، در مسیر ~/.gitconfig و در سیستم عامل ویندوز در مسیر C:\Documents and Settings\$USER و یا C:\Users\$USER ]. با استفاده از گزینه‌ی --global بعد از دستور git config می‌توان این تنظیمات را مشاهده نموده و یا تغییر داد. این تنظیمات به طور پیشفرض برای تمام پروژه‌ها یا Repository های آن کاربر استفاده می شود.
تنظیمات اختصاصی Repository که مربوط به یک Repo یا پروژه‌ی مشخص بوده و در پوشه‌ی آن پروژه، در مسیر .git/config ذخیره می شوند. تنظیمات اعمال شده در این قسمت نسبت به تنظیمات عمومی، در اولویت قرار می گیرد. به عبارتی اگر یک پارامتر در این دو قسمت با مقادیر متفاوت ذخیره شده باشد، هنگام کار با آن Repository، تنظیمات اعمال شده در آن بر تنظیمات عمومی برتری خواهد داشت. برای ایجاد این تنظیمات در یک Repository مشخص، کافی است به محل ذخیره آن Repo رفته و از دستور git config بدون --global استفاده نمایید.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;برای وارد نمودن دستورات گیت – پس از نصب آن – می توان در لینوکس و مک از Terminal، و در ویندوز از برنامه Git Bash (که پس از نصب برنامه، از منوی Start قابل دسترس است) استفاده نمود.
تعیین مشخصات کاربری&lt;/p&gt;

&lt;p&gt;هر commit که شما انجام می دهید، حاوی “نام” و “ایمیل” مالک آن است. برای آنکه گیت بتواند مالک هر commit را شناسایی کند، باید نام و آدرس ایمیل خود را در تنظیمات عمومی (و یا تنها همان Repo مورد نظرتان) درج کنید. برای ثبت این مشخصات در تنظیمات عمومی به صورت زیر عمل کنید:
1
2&lt;/p&gt;

&lt;p&gt;git config –global user.name “Your Name”
git config –global user.email “your@email.com”&lt;/p&gt;

&lt;p&gt;رنگ‌آمیزی نوشته‌ها در کنسول&lt;/p&gt;

&lt;p&gt;به منظور آسان‌تر خواندن نوشته‌ها در کنسول (Terminal یا Bash) می توان از دستورات زیر برای رنگ‌آمیزی آن‌ها استفاده نمود:
1
2
3
4&lt;/p&gt;

&lt;p&gt;git config –global color.ui auto
git config –global color.diff auto
git config –global color.status auto
git config –global color.branch auto&lt;/p&gt;

&lt;p&gt;مشاهده تنظیمات&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;اگر می خواهید تمامی تنظیمات گیت “سیستمی + عمومی” را مشاهده کنید، می توانید (ترجیحا خارج از پوشه‌ی یک پروژه یا Repository) با استفاده از دستور git config --list پارامترهای ثبت شده را لیست کنید.
اگر داخل پوشه‌ پروژه یا Repository خود، این دستور را فراخوانی کنید، درصورتی که برای آن پروژه تنظیماتی تعریف کرده باشید، آن تنظیمات جایگزین تنظیمات عمومی کاربر خواهد شد و دستور git config --list تنظیمات “سیستمی + اختصاصی پروژه” را نمایش خواهد داد.
برای آنکه تنها تنظیمات سیستمی را مشاهده نمایید، عبارت --system و برای مشاهده تنظیمات عمومی عبارت --global را به انتهای دستور فوق اضافه نمایید.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;تکمیل خودکار در git&lt;/p&gt;

&lt;p&gt;این بخش کاملا اختیاری است، شما می توانید بدون دنبال کردن ادامه‌ی این مقاله به درستی با گیت کار کنید؛ اما اگر حس کنجکاوی این اجازه را به شما نمی‌دهد، پس بیایید ادامه دهیم :-) “تکمیل خودکار” یا “Auto-Completion” یک ویژگی و ابزار بسیار مفید برای ساده‌سازی کار با گیت است. این ویژگی در نسخه‌ی گیت تهیه شده برای سیستم عامل ویندوز، ضمیمه شده و نیازی به نصب آن نیست؛ اما در سیستم‌های مک و شبه‌یونیکس ابتدا باید این ابزار را به گیت اضافه نمود. برای این‌کار مراحل زیر را در Terminal انجام می‌دهیم:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;به پوشه home کاربر رفته.
با استفاده از curl برنامه‌ی git-completion.bash را از github دانلود می کنیم.
سپس آن را rename کرده و یک نقطه به ابتدای نام آن اضافه می کنیم.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1
2
3
4
5
6
7
8&lt;/p&gt;

&lt;p&gt;cd ~
# Go to user home directory&lt;/p&gt;

&lt;p&gt;curl -OL https://github.com/git/git/raw/master/contrib/completion/git-completion.bash
# Download “git-completion.bash” file from github&lt;/p&gt;

&lt;p&gt;mv ~/git-completion.bash ~/.git-completion.bash
# Rename downloaded file&lt;/p&gt;

&lt;p&gt;تنها کاری که باقی مانده، آن است که .git-completion.bash را به صورت پیش‌فرض فراخوانی کنیم. برای اینکار، در پوشه home کاربر رفته و فایل  .bash_profile را با یک ویرایشگر متن باز کنید. (اگر در لینوکس محیط گرافیکی ندارید از برنامه GNU nano استفاده کنید nano ~/.bash_profile) سپس کد زیر را در آن وارد کرده و فایل را ذخیره نمایید:
1
2
3&lt;/p&gt;

&lt;p&gt;if [ -f ~/.git-completion.bash ]; then
    source ~/.git-completion.bash
fi&lt;/p&gt;

&lt;p&gt;پس از ذخیره فایل، Terminal را بسته و مجدد باز کنید، فایل .git-completion.bash به صورت پیش‌فرض فراخوانی شده است. اکنون زمان آن است که از کار با آن لذت ببریم :-) به عنوان مثال در کنسول، عبارت git h را وارد نموده و کلید Tab را فشار دهید، مشاهده می کنید که برنامه دستور شما را به صورت git help کامل می‌کند! می توان از این روش در کامل کردن نام فایل‌ها، مسیرها و… استفاده کرد، و این چیزی است که به روند انجام کار سرعت می‌بخشد.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 06:00:30 +0430</pubDate>
        <link>http://m-movahedi.ir/jekyll/update/2016/04/05/git4.html</link>
        <guid isPermaLink="true">http://m-movahedi.ir/jekyll/update/2016/04/05/git4.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>اموزش مقدماتی گیت</title>
        <description>&lt;p&gt;مبانی git&lt;/p&gt;

&lt;p&gt;در نوشته پیشین در مورد سیستم های کنترل نسخه توضیح دادیم؛ اما خلاصه کلام، git چیست؟
این بخش بسیار مهم است، زیرا اگر شما درک کنید که git چه هست و چطور کار می کند، آنوقت استفاده از git احتملا به‌طور چشمگیری برایتان ساده می شود.&lt;/p&gt;

&lt;p&gt;همانطور که git را یاد می‌گیرید سعی کنید ذهن خود را از چیزهایی که احتمالا درباره‌ی سایر سیستم های کنترل نسخه می دانید پاک کنید :-)  اصولا در یادگیری هر تکنولوژی جدید بهتر هست بدون پیش‌فرض قبلی وارد شوید. انجام این کار به شما کمک می کند تا در هنگام استفاده از آن تکنولوژی، سردرگم نشوید.&lt;/p&gt;

&lt;p&gt;git به اطلاعات و فایل های یک پروژه، بسیار متفاوت از سایر سیستم های کنترل نسخه نگاه می کند و به شکل دیگری آن‌ها را ذخیره می کند. دانستن این تفاوت‌ها به جلوگیری از گیج شدن در هنگام کار کمک می کند.
ذخیره بصورت یک عکس بجای ذخیره‌ی تغییرات&lt;/p&gt;

&lt;p&gt;بزرگترین تفاوت گیت git با سایر سیستم های کنترل نسخه مثل SVN، در نوع نگاه git به داده‌های پروژه (فایل‌‌ها، فولدرها) و نحوه ذخیره آنها است.&lt;/p&gt;

&lt;p&gt;بسیاری از سیستم های کنترل نسخه اطلاعات مربوط به هر پروژه را بر اساس تغییرات صورت گرفته در فایل ها ذخیره می کنند. این سیستم ها (مثل SVN، Perforce، Bazaar و…) به اطلاعات یک پروژه اینطور نگاه می کنند که یک مجموعه، فایل‌هایی هستند که در این پروژه وجود دارند، و مجموعه دوم، تغییراتی هستند که در گذر زمان روی فایل های موجود در پروژه (یا همان مجموعه اول) اعمال شده اند.&lt;/p&gt;

&lt;p&gt;به عبارتی دیگر، در مرحله اول یا Version 1، نسخه اصلی فایل‌های پروژه ذخیره شده و در سایر مراحل، تنها همان تغییری در یک یا چند عدد از فایل‌ها صورت گرفته است، ذخیره خواهد شد. نمودار زیر بصورت شماتیک رفتار این دسته از سیستم‌ها را نشان می‌دهد:
VCSs except git, store data as changes to a base version of each file&lt;/p&gt;

&lt;p&gt;در این نمودار، Δi نشان دهنده تغییر i اُم اعمال شده بر روی فایل اصلی است.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; سایر سیستم ها، تمایل دارند که اطلاعات هر پروژه را بصورت تغییرات اعمال شده بر روی نسخه های اصلی فایل های پروژه، ذخیره کنند.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;اما git به این شکل اطلاعات پروژه را ذخیره نمی کند. هر بار که شما یک یا چند فایل از پروژه را تغییر داده و آن را در git ذخیره می کنید (اصطلاح commit کردن)، git یک تصویر از نسخه تغییر یافته آن فایل ها تهیه می کند و یک مرجع به آن اختصاص می دهد؛&lt;/p&gt;

&lt;p&gt;به عنوان یک مثال ساده، تصور کنید یک می خواهید حرکت یک توپِ در حال حرکت را ثبت کنید. کاری که سیستم هایی مانند SVN انجام می دهند این است که در لحظه اول توپ را در مکان اصلی آن ثبت می کنند و در لحظه های بعدی از حرکت توپ، تنها “جابجایی” و یا “تغییر مکان” توپ را دنبال کرده و ذخیره می کنند. اما git به جای ذخیره تغییر مکان توپ، در هر لحظه یک عکس یا snapshot از حرکت توپ تهیه کرده و ذخیره می کند. به این ترتیب ما در هر لحظه یک توپ داریم که موقعیت مکانی آن تغییر کرده اما وابسته به موقعیت ابتدایی آن نیست! (واقعا مثال ساده‌ای بود :-D)&lt;/p&gt;

&lt;p&gt;نمودار زیر بصورت شماتیک نحوه عملکرد git را نشان می دهد:&lt;/p&gt;

&lt;p&gt;Git stores data as snapshots of the project over time&lt;/p&gt;

&lt;p&gt;در این نمودار، A1 نشان دهنده تصویر فایل A پس از اولین تغییر است.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; برای کارایی بیشتر، اگر فایلی نسبت به حالت قبل تغییر نکرده باشد، git دومرتبه آن را ذخیره نمی کند، بلکه از همان فایل نسخه پیشین استفاده می کند. برای مثال در Version 2، فایل B تغییر نکرده و هرگاه Version 2 پروژه نمایش داده شود، git از فایل B موجود در Version 1 استفاده خواهد کرد.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;این تمایز مهم بین git و سایر سیستم های کنترل نسخه (VCS) است؛ چیزی که گیت را به ابزاری قدرتمند برای مدیریت فایل تبدیل کرده که تمام جنبه های کنترل نسخه را پوشش می دهد. [در نوشته های بعدی در مبحث Branch به مزایای این طرح پی خواهیم برد.]
انجام کارها به صورت محلی&lt;/p&gt;

&lt;p&gt;همانطور که در نوشته پیشین به آن اشاره شد، با استفاده از git که یک “سیستم مدیریت نسخه توزیع شده” یا “DVCS” است، در بیشتر عملیات ها، شما تنها به فایل های موجود در کامپیوتر خودتان نیاز خواهید داشت و تقریبا همه چیز بصورت محلی انجام می شود. در حالی که در “سیستم های کنترل نسخه متمرکز” یا “CVCS” مانند SVN، اکثر عملیات ها وابسته به کامپیوتر سرور یا مرکزی بوده و این باعث ایجاد سربار یا overhead در شبکه شده و سرعت عملیات را کاهش می دهد.&lt;/p&gt;

&lt;p&gt;در این مقایسه، ممکن است اینگونه به نظر رسد که انگار یک منبع قدرت فرا زمینی، git را با یک قدرت غیرقابل بیان نیرو بخشیده 😀 چراکه شما همه‌ی اطلاعات مربوط به یک پروژه (در طول زمان) را در کامپیوتر شخصی خود دارید و هر عملیات از git را که بخواهید، به سرعت انجام می پذیرد.&lt;/p&gt;

&lt;p&gt;به عنوان مثال، برای دیدن تاریخچه و روند تغییرات یک پروژه، git نیازی به اتصال به سرور و دریافت آن اطلاعات ندارد؛ همه چیز در کامپیوتر محلی‌تان ذخیره شده است. یا اگر بخواهید تغییرات یک فایل را نسبت به وضعیت یک ماه پیش مشاهده کنید، git نیازی به ارسال این درخواست به سرور ندارد، بلکه به راحتی به تاریخچه ثبت شده در محل پروژه نگاه کرده و تغییرات آن فایل را در این بازه یک ماهه محاسبه می کند.&lt;/p&gt;

&lt;p&gt;این به این معنی است که شما می توانید به سادگی در هر جایی که که هستید، در قطار، در هواپیما، در سفر و… به راحتی پروژه خود را توسعه دهید و تغییرات آن را در پایگاه داده محلی git ثبت کنید. درحالی که اگر از سیستم هایی مشابه SVN استفاده می کردید، نمی توانستید بدون اتصال به کامپیوتر سرور، تغییرات انجام شده بر روی فایل های پروژه را در پایگاه داده (که بر روی سرور مرکزی واقع شده) ذخیره کنید.
دسترسی به فایل ها بر اساس مقدار “هَش” (Hash)&lt;/p&gt;

&lt;p&gt;در ابتدا لازم است توضیحی ابتدایی در مورد “هَش” (Hash) داده شود.&lt;/p&gt;

&lt;p&gt;Hash “هَش” رشته ای است که از “توابع درهم‌سازی” یا “Hash functions” حاصل می شود و بسته به نوع الگوریتم تابع درهم‌ساز، تعداد کاراکترهای آن متفاوت است. از توابع درهم‌ساز می توان به MD5 ،SHA-1 ،HAVAL و WHIRLPOOL اشاره کرد [در این نوشته هدف توضیح کاربرد “هش” خروجی از این توابع است.]&lt;/p&gt;

&lt;p&gt;برای مثال، رشته‌ی “هش” خروجی از دو تابع MD5 و SHA-1 برای عبارت “kava.ir”، بصورت زیر است:
1
2&lt;/p&gt;

&lt;p&gt;31a99cefedd513ec1873db7d9c21c1af			// MD5 Hash
f5527fbbd67a0af38eb2ac958c544789b0af110b	// SHA-1 Hash&lt;/p&gt;

&lt;p&gt;می توان گفت “هش” تولید شده، برای هر رشته‌ یا عبارتِ ورودی به توابع درهم‌ساز، منحصر بفرد است؛&lt;/p&gt;

&lt;p&gt;بنابراین اگر بجای وارد نمودن یک عبارت، محتوای یک فایل را به این توابع وارد کرده و مقدار “هش” خروجی تابع را ذخیره کنیم، و فایل را ویرایش نموده و دوباره مقدار “هش” آن را با همان تابع محاسبه کنیم، این دو مقدار “هش” با یکدیگر متفاوت خواهند بود. از این روش می توان فهمید که آیا در یک فایل تغییری رخ داده است یا خیر.&lt;/p&gt;

&lt;p&gt;قبل از ذخیره شدن هر چیز در git، ابتدا مقدار “هش” آن محاسبه می شود. به عبارتی غیر ممکن است که فایل یا پرونده‌ای در پروژه تغییر کند بدون آنکه git از آن مطلع شود.&lt;/p&gt;

&lt;p&gt;مکانیزم و الگوریتمی که git برای محاسبه “هش” فایل‌ها و پوشه‌ها از آن استفاده می کند، SHA-1 نام دارد. خروجی این تابع، یک رشته ۴۰ کاراکتری است که ترکیبی از حروف a-f و اعداد ۹-۰ می باشد (یک رشته‌ی هگزادسیمال یا مبنای ۱۶) که بر اساس محتوای فایل یا ساختار پرونده‌ی پروژه محاسبه می شود.&lt;/p&gt;

&lt;p&gt;در حقیقت git بر اساس نام فایل‌، آن را در پایگاه داده‌ی خود جستجو نمی کند، بلکه با استفاده از رشته‌ی “هش” حاصل از محتوای فایل، به آن دسترسی پیدا می کند.
سه حالت اصلی در git&lt;/p&gt;

&lt;p&gt;این بخش مهمترین قسمت از مبحث امروز است که باید در مورد git به یاد بسپارید، اگر می خواهید ادامه‌ی روند آموزش را به راحتی طی کنید، به این بخش توجه کنید.&lt;/p&gt;

&lt;p&gt;۳ حالت یا وضعیت اصلی برای فایل های شما در git وجود دارد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;سپرده شده یا “Committed”
تغییر یافته یا “Modified”
به روی صحنه رفته یا “Staged”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Committed به این معنی است که اطلاعات شما به طور ایمن در پایگاه داده‌ی git ذخیره شده است.
Modified به این معنی است که شما فایل را وبرایش کرده و تغییر داده اید اما هنوز Commit نکرده‌اید (در git ذخیره نکرده‌اید.)
Staged به این معنی است که شما یک فایل تغییر یافته یا Modify شده را برای قرار گیری در Commit بعدی به روی صحنه برده‌اید. (یعنی علامت گذاری نموده اید تا در اولین Commit در git ذخیره شود.)&lt;/p&gt;

&lt;p&gt;نمودار زیر سه بخش اصلی یک پروژه git را به ما نشان می دهد: پوشه‌ی محیط کار، بخش stage یا صحنه و پوشه‌ی git یا همان repository&lt;/p&gt;

&lt;p&gt;Working directory staging area and git directory
پوشه‌ی git یا همان repository که با نام git. در پوشه‌ی محیط کار (پروژه) ایجاد می گردد، جایی است که تمام اطلاعات پس از هر Commit در آن ذخیره می شود. این بخش مهمترین قسمت از git است که تاریخچه تغییرات پروژه را دربر می گیرد و در انتقال پروژه از کامپیوتر محلی به سرور و بلعکس، انتقال می یابد.&lt;/p&gt;

&lt;p&gt;پوشه‌ی محیط کار یا پروژه، تنها یک نسخه از پروژه است. فایل های درون این پوشه از پایگاه داده‌ی git (واقع در پوشه git.) استخراج و از حالت فشرده خارج شده و در پوشه محیط کار یا محل پروژه قرار می گیرند تا شما بتوانید آن‌ها را تغییر داده یا ویرایش نمایید.&lt;/p&gt;

&lt;p&gt;بخش stage یا صحنه، تنها یک فایل ساده است که در داخل پوشه git قرار گرفته است. این فایل حاوی اطلاعات مربوط به فایل هایی است که باید در Commit بعدی، در پوشه git ذخیره شوند.&lt;/p&gt;

&lt;p&gt;روند انجام کار در git به صورت زیر است:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;شما فایل های موجود در پوشه پروژه را ویرایش می کنید.
فایل های تغییر یافته یا افزوده/کاسته شده از پروژه را به stage اضافه می کنید.
فایل های به روی stage رفته را Commit کرده و با اینکار یک تصویر از وضعیت پروژه و فایل های روی stage را به صورت دائمی در پوشه git خود، ذخیره می کنید.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;پس اگر یک نسخه از یک فایل مشخص در پوشه‌ git است، آن فایل Commit شده نامیده می شود.
اگر یک فایل ویرایش شده و یا به پروژه افزوده یا از آن حذف گردیده، و به stage نیز اضافه شده است، آن فایل staged یا “به روی صحنه رفته” نامیده می شود.
و اما اگر آن فایل پس از ویرایش به stage اضافه نشده باشد، در Commit بعدی شرکت داده نشده و Modified یا “ویرایش شده” نامیده می شود.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 05:00:37 +0430</pubDate>
        <link>http://m-movahedi.ir/git/2016/04/05/git3.html</link>
        <guid isPermaLink="true">http://m-movahedi.ir/git/2016/04/05/git3.html</guid>
        
        <category>github</category>
        
        <category>github-pages</category>
        
        <category>jekyll</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>تاریخچه گیت</title>
        <description>&lt;p&gt;هسته لینوکس که یک برنامه متن‌باز هست توسط لینوس توروالدز در سال ۱۹۹۱ نوشته شد [برای اطلاع بیشتر به نوشته‌ی مبانی و مقدمات لینوکس مراجعه کنید]. برای بیشتر عمر این پروژه یعنی از سال ۱۹۹۱ تا ۲۰۰۲، توسعه‌ی هسته لینوکس توسط افراد حاضر در پروژه به صورت شخصی صورت می گرفت؛ یعنی برای توسعه، هرکس به‌طور جداگانه از روشی برای کنترل نسخه استفاده می کرد.&lt;/p&gt;

&lt;p&gt;در سال ۲۰۰۲، لینوس، برای توسعه هسته لینوکس، از سیستم کنترل نسخه‌ی BitKeeper (مدل DVCS) استفاده کرد که به تمام اعضای حاضر در توسعه پروژه، اجازه می داد به صورت رایگان از سرویس BitKeeper استفاده کنند.&lt;/p&gt;

&lt;p&gt;اما در سال ۲۰۰۵، ارتباط تیم توسعه هسته لینوکس با شرکت تجاری‌ای که سرویس BitKeeper را پشتیبانی می‌کرد از بین رفت و امکان استفاده رایگان از سرویس BitKeeper برداشته شد.&lt;/p&gt;

&lt;p&gt;این باعث شد تیم توسعه لینوکس و مشخصا خود لینوس توروالدز که خالق لینوکس بود، ابزار مورد نیاز ویژه خودشان برای کنترل نسخه ها را تولید کنند.&lt;/p&gt;

&lt;p&gt;از سایر اهدافی که در این سیستم جدید مدنظر بود، می توان به موارد زیر اشاره کرد:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;سرعت
طرح ساده
پشتیبانی قوی برای توسعه غیرخطی (هزاران تغییر همزمان توسط افراد حاضر در توسعه پروژه)
کاملا توزیع شده (بر اساس مدل DVCS)
و اینکه برای پروژه هایی به بزرگی لینوکس پاسخگو باشد.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;این سیستم که git نامگذاری شد در همان سال (۲۰۰۵)، تنها ۲ ماه پس از شروع توسعه‌ی آن، به عنوان نرم افزار رسمی کنترل نسخه برای توسعه هسته لینوکس مورد استفاده قرار گرفت.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 01:45:30 +0430</pubDate>
        <link>http://m-movahedi.ir/git/2016/04/05/git2.html</link>
        <guid isPermaLink="true">http://m-movahedi.ir/git/2016/04/05/git2.html</guid>
        
        <category>github</category>
        
        <category>github-pages</category>
        
        <category>jekyll</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>گیت چیست؟</title>
        <description>&lt;p&gt;کنترل نسخه چیست و چرا باید به اون اهمیت داد؟
کنترل نسخه به معنای دنبال نمودن تغییرات اعمال شده در فایل های پروژه است. وظیفه یک برنامه کنترل نسخه ثبت تغییرات صورت گرفته بر روی فایل های پروژه مثل ویرایش کردن، افزودن و یا پاک نمودن آن هاست؛ به گونه ای که هرگاه بخواهیم بتوانیم به نسخه های مختلف پروژه دسترسی پیدا کنیم.&lt;/p&gt;

&lt;p&gt;برای مثال، تصور کنید که یک گرافیست یا طراح وب هستید و می خواهید همانطور که به مرور زمان روی پروژه خود کار می کنید، در هر مرحله از پیشرفت پروژه یک نسخه از آن را تهیه و در جایی نگهداری کنید تا بعدا در صورت نیاز به آنها دسترسی داشته باشید. برنامه های کنترل نسخه دقیقا آن چیزی هستند که شما به آن نیاز دارید!&lt;/p&gt;

&lt;p&gt;یک برنامه کنترل نسخه یا VCS (مخفف شده‌ی: Version Control System) به شما این امکان را می دهد که فایل های پروژه را به ویرایش های قبلی آن ها بازگردانید، تغییرات اعمال شده هر فایل را بعد از پیشرفت پروژه مشاهده کرده و آن را با وضعیت قبلی اش مقایسه کنید، در صورتی که گروهی روی یک پروژه کار می کنید، ببینید چه کسی در هر مرحله پروژه را ویرایش کرده و اگر در جایی اشتباهی صورت گرفته، پروژه را به حالت قبل از ویرایش بازگردانده و آن را بازیابی کنید، و…
سیستم های کنترل نسخه محلی&lt;/p&gt;

&lt;p&gt;یکی از راهکارهای رایجی که عمده مردم برای کنترل پروژه خود از آن استفاده می کنند، کپی گرفتن از فایل های پروژه و نگهداری آن ها با نام متفاوت یا در پوشه های متفاوت است. این راه همان مقدار که ساده است، امکان خطا نیز در آن وجود دارد. ممکن است به سادگی فراموش کنید که چه فایلی در چه پوشه ای را دارید ویرایش می کنید، یا فایلی را به اشتباه تغییر داده و نسخه پشتیبان خود را از بین ببرید.
برای رهایی از این قبیل مشکلات، سال ها پیش برنامه نویسان سیستم های کنترل نسخه ای را ساختند که بر روی یک کامپیوتر نصب می شد و تغییرات همه فایل ها در نسخه های مختلف را در پایگاه داده ساده اش ذخیره می کرد. این مدل برنامه ها، که سیستم های کنترل نسخه محلی یا Local Version Control Systems نامیده می شوند تنها قابل استفاده بر روی یک کامپیوتر مشخص می باشند.
سیستم های کنترل نسخه متمرکز&lt;/p&gt;

&lt;p&gt;مشکل هنوز برطرف نشده بود! اگر پروژه ای قرار بود به صورت گروهی انجام شود، سیستمی نیاز بود تا همه ی اعضای گروه بتوانند به صورت مشترک به آن دسترسی داشته باشند و در توسعه و پیشرفت پروژه مشارکت کنند.&lt;/p&gt;

&lt;p&gt;برای حل این مشکل سیستم های کنترل نسخه متمرکز یا Centralized Version Control Systems ایجاد شدند. این سیستم ها که Subversion (همان SVN) و Perforce از جمله نمونه های آن هستند، دارای یک سرور هستند که تمام نسخه های پروژه (فایل ها)، و تعداد کامپیوتر هایی که به نسخه های پروژه بر روی سرور دسترسی دارند را شامل می شود. یعنی همه کارهایی که اعضای پروژه انجام می دادند و تغییراتی که  ایجاد می کردند بر روی یک سرور مشخص که همه به آن دسترسی داشتند ذخیره می شد و مشخص بود که چه کسی در چه زمانی چه بخشی از پروژه را تغییر داده است.
با همه ی مزایا و امتیازاتی که این سیستم داشت، هنوز یک مشکل بزرگ روند انجام پروژه را تهدید می کرد.&lt;/p&gt;

&lt;p&gt;اگر کامپیوتر سرور برای مدتی از دسترس خارج می شد، در طی آن مدت هیچ کدام از اعضا قادر نبودند که در پروژه مشارکت کنند و تغییرات انجام شده بر روی پروژه را روی سرور ذخیره کنند.
بدتر از این! اگر هارد دیسک سرور که پایگاه داده مرکزی بر روی آن قرار گرفته، دچار آسیب می شد و نسخه ی پشتیبان از اطلاعات سرور تهیه نشده بود، تمام پروژه از ابتدا تا انتهای کار، کاملا از دست می رفت.&lt;/p&gt;

&lt;p&gt;این مدل برای سال ها به عنوان یک استاندارد کنترل نسخه شناخته می شد. (و البته هنوز مورد استفاده قرار می گیرد.)
سیستم های کنترل نسخه توزیع شده&lt;/p&gt;

&lt;p&gt;خب، اینجا همان جایی بود که سیستم های کنترل نسخه توزیع شده یا Distributed Version Control Systems وارد ماجرا شدند :-) Git، Mercurial، Bazaar و Darcs از جمله این سیستم ها به شمار می روند.&lt;/p&gt;

&lt;p&gt;در سیستم های کنترل نسخه توزیع شده که به صورت مخفف DVCS نامیده می شوند، کاربر ها و اعضای یک پروژه، یک نسخه کامل از پروژه را از کامپیوتر سرور، بر روی کامپیوتر خود ایجاد می کنند و اگر حتی کامپیوتر سرور از دسترس خارج شده یا کلا از بین برود 😀 هر یک از اعضای مشترک در پروژه می تواند فایل های پروژه را دوباره بر روی سرور قرار داده و پروژه را بازیابی کند.
روند کنترل نسخه در این مدل به این صورت است که اعضا با ایجاد یک نسخه از پروژه بر روی کامپیوتر خود، به توسعه ی آن می پردازند و نسخه های جدید را به صورت محلی در کامپیوتر خود ذخیره می کنند، و همینطور می‌توانند تغییرات انجام شده بر روی کامپیوتر محلی خود را روی سرور قرار دهند تا اعضای دیگر نیز به نسخه های جدید دسترسی پیدا کنند.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 01:30:30 +0430</pubDate>
        <link>http://m-movahedi.ir/git/2016/04/05/git.html</link>
        <guid isPermaLink="true">http://m-movahedi.ir/git/2016/04/05/git.html</guid>
        
        <category>github</category>
        
        <category>github-pages</category>
        
        <category>jekyll</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>درباره سایت</title>
        <description>&lt;p&gt;مطالب این سایت مربوط به آموزش گیت است.&lt;/p&gt;

&lt;p&gt;دانشگاه بزرگمهرقاینات
کارشناسی- نرم افزار
محبوبه موحدی نسب&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 05:00:37 +0430</pubDate>
        <link>http://m-movahedi.ir/tamas/ba/ma/2016/04/02/about.html</link>
        <guid isPermaLink="true">http://m-movahedi.ir/tamas/ba/ma/2016/04/02/about.html</guid>
        
        <category>github</category>
        
        <category>github-pages</category>
        
        <category>jekyll</category>
        
        
        <category>tamas</category>
        
        <category>ba</category>
        
        <category>ma</category>
        
      </item>
    
  </channel>
</rss>
